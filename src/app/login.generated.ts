/* eslint-disable */ /**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 * instead, edit one of the `.gql` files in the project.
 */

import * as Types from './types.generated';

import { api } from '@src/app/baseApi';
(module as any).hot?.accept();
export type AuthMutationVariables = Types.Exact<{
  loginUserInput: Types.LoginUserInput;
}>;

export type AuthMutation = {
  __typename?: 'Mutation';
  login: {
    __typename?: 'LoginResponse';
    id_token: string;
    user: { __typename?: 'User'; id: string; name: string };
  };
};

export type GetCurrentUserQueryVariables = Types.Exact<{
  [key: string]: never;
}>;

export type GetCurrentUserQuery = {
  __typename?: 'Query';
  currentUser: {
    __typename?: 'User';
    id: string;
    username: string;
    name: string;
  };
};

export const AuthDocument = `
    mutation Auth($loginUserInput: LoginUserInput!) {
  login(loginUserInput: $loginUserInput) {
    user {
      id
      name
    }
    id_token
  }
}
    `;
export const GetCurrentUserDocument = `
    query getCurrentUser {
  currentUser {
    id
    username
    name
  }
}
    `;

const injectedRtkApi = api.injectEndpoints({
  overrideExisting: (module as any).hot?.status() === 'apply',
  endpoints: (build) => ({
    Auth: build.mutation<AuthMutation, AuthMutationVariables>({
      query: (variables) => ({ document: AuthDocument, variables }),
    }),
    getCurrentUser: build.query<
      GetCurrentUserQuery,
      GetCurrentUserQueryVariables | void
    >({
      query: (variables) => ({ document: GetCurrentUserDocument, variables }),
    }),
  }),
});

export { injectedRtkApi as api };
export const {
  useAuthMutation,
  useGetCurrentUserQuery,
  useLazyGetCurrentUserQuery,
} = injectedRtkApi;
